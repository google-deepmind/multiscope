// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: tensor.proto

package tensor_go_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TensorWritersClient is the client API for TensorWriters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TensorWritersClient interface {
	// Create a new tensor writer node in Multiscope.
	NewWriter(ctx context.Context, in *NewWriterRequest, opts ...grpc.CallOption) (*NewWriterResponse, error)
	// Reset the data of a writer.
	ResetWriter(ctx context.Context, in *ResetWriterRequest, opts ...grpc.CallOption) (*ResetWriterResponse, error)
	// Write tensor data to Multiscope.
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
}

type tensorWritersClient struct {
	cc grpc.ClientConnInterface
}

func NewTensorWritersClient(cc grpc.ClientConnInterface) TensorWritersClient {
	return &tensorWritersClient{cc}
}

func (c *tensorWritersClient) NewWriter(ctx context.Context, in *NewWriterRequest, opts ...grpc.CallOption) (*NewWriterResponse, error) {
	out := new(NewWriterResponse)
	err := c.cc.Invoke(ctx, "/multiscope.tensors.TensorWriters/NewWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tensorWritersClient) ResetWriter(ctx context.Context, in *ResetWriterRequest, opts ...grpc.CallOption) (*ResetWriterResponse, error) {
	out := new(ResetWriterResponse)
	err := c.cc.Invoke(ctx, "/multiscope.tensors.TensorWriters/ResetWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tensorWritersClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/multiscope.tensors.TensorWriters/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TensorWritersServer is the server API for TensorWriters service.
// All implementations must embed UnimplementedTensorWritersServer
// for forward compatibility
type TensorWritersServer interface {
	// Create a new tensor writer node in Multiscope.
	NewWriter(context.Context, *NewWriterRequest) (*NewWriterResponse, error)
	// Reset the data of a writer.
	ResetWriter(context.Context, *ResetWriterRequest) (*ResetWriterResponse, error)
	// Write tensor data to Multiscope.
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	mustEmbedUnimplementedTensorWritersServer()
}

// UnimplementedTensorWritersServer must be embedded to have forward compatible implementations.
type UnimplementedTensorWritersServer struct {
}

func (UnimplementedTensorWritersServer) NewWriter(context.Context, *NewWriterRequest) (*NewWriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewWriter not implemented")
}
func (UnimplementedTensorWritersServer) ResetWriter(context.Context, *ResetWriterRequest) (*ResetWriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetWriter not implemented")
}
func (UnimplementedTensorWritersServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedTensorWritersServer) mustEmbedUnimplementedTensorWritersServer() {}

// UnsafeTensorWritersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TensorWritersServer will
// result in compilation errors.
type UnsafeTensorWritersServer interface {
	mustEmbedUnimplementedTensorWritersServer()
}

func RegisterTensorWritersServer(s grpc.ServiceRegistrar, srv TensorWritersServer) {
	s.RegisterService(&TensorWriters_ServiceDesc, srv)
}

func _TensorWriters_NewWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TensorWritersServer).NewWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiscope.tensors.TensorWriters/NewWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TensorWritersServer).NewWriter(ctx, req.(*NewWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TensorWriters_ResetWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TensorWritersServer).ResetWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiscope.tensors.TensorWriters/ResetWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TensorWritersServer).ResetWriter(ctx, req.(*ResetWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TensorWriters_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TensorWritersServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiscope.tensors.TensorWriters/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TensorWritersServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TensorWriters_ServiceDesc is the grpc.ServiceDesc for TensorWriters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TensorWriters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiscope.tensors.TensorWriters",
	HandlerType: (*TensorWritersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewWriter",
			Handler:    _TensorWriters_NewWriter_Handler,
		},
		{
			MethodName: "ResetWriter",
			Handler:    _TensorWriters_ResetWriter_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _TensorWriters_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tensor.proto",
}
