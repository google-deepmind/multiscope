// Protocol buffer to stream scientific data.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: tree.proto

package tree_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Identifier of the tree on the server.
type TreeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID int64 `protobuf:"varint,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
}

func (x *TreeID) Reset() {
	*x = TreeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeID) ProtoMessage() {}

func (x *TreeID) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeID.ProtoReflect.Descriptor instead.
func (*TreeID) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{0}
}

func (x *TreeID) GetTreeID() int64 {
	if x != nil {
		return x.TreeID
	}
	return 0
}

// Path of a node in the tree.
type NodePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *NodePath) Reset() {
	*x = NodePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePath) ProtoMessage() {}

func (x *NodePath) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePath.ProtoReflect.Descriptor instead.
func (*NodePath) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{1}
}

func (x *NodePath) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

// A node and its information in the graph.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set when an error occurred on the server.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Path of the node in the graph.
	Path *NodePath `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Name of the node.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// List of IDs of children of this node.
	Children []*Node `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	// High-level type of the data represented by this node and its children.
	Mime string `protobuf:"bytes,5,opt,name=mime,proto3" json:"mime,omitempty"`
	// True if the node has at least one child. This is always true if the
	// `children` field has at least one element. If this is true and the
	// `children` field is empty, then the children may be fetched by making
	// another request.
	//
	// With this feature we avoid having to include the complete subtree under
	// Node, but at the same time inform users if they should make further queries
	// of the structure.
	HasChildren bool `protobuf:"varint,6,opt,name=has_children,json=hasChildren,proto3" json:"has_children,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{2}
}

func (x *Node) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Node) GetPath() *NodePath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Node) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

func (x *Node) GetHasChildren() bool {
	if x != nil {
		return x.HasChildren
	}
	return false
}

// Data streamed from a node.
type NodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set when an error occurred on the server.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Path of the node in the graph.
	Path *NodePath `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Tick number set by the writer. It should increase everytime some data
	// is written.
	Tick uint32 `protobuf:"varint,3,opt,name=tick,proto3" json:"tick,omitempty"`
	// Payload.
	//
	// Types that are assignable to Data:
	//
	//	*NodeData_Raw
	//	*NodeData_Pb
	Data isNodeData_Data `protobuf_oneof:"data"`
	// MIME type of the `data` field. If `data` is `raw` bytes, this field
	// specifies its MIME type. If `data` is an Any `pb`, this field must be set
	// to `application/x-protobuf` as per go/multiscope-rfc #12.
	Mime string `protobuf:"bytes,8,opt,name=mime,proto3" json:"mime,omitempty"`
}

func (x *NodeData) Reset() {
	*x = NodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeData) ProtoMessage() {}

func (x *NodeData) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeData.ProtoReflect.Descriptor instead.
func (*NodeData) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{3}
}

func (x *NodeData) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *NodeData) GetPath() *NodePath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *NodeData) GetTick() uint32 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (m *NodeData) GetData() isNodeData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *NodeData) GetRaw() []byte {
	if x, ok := x.GetData().(*NodeData_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *NodeData) GetPb() *anypb.Any {
	if x, ok := x.GetData().(*NodeData_Pb); ok {
		return x.Pb
	}
	return nil
}

func (x *NodeData) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

type isNodeData_Data interface {
	isNodeData_Data()
}

type NodeData_Raw struct {
	Raw []byte `protobuf:"bytes,6,opt,name=raw,proto3,oneof"`
}

type NodeData_Pb struct {
	Pb *anypb.Any `protobuf:"bytes,7,opt,name=pb,proto3,oneof"`
}

func (*NodeData_Raw) isNodeData_Data() {}

func (*NodeData_Pb) isNodeData_Data() {}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the source of the event.
	Path *NodePath `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Custom message specific to the event type (ie. KeyPress, MouseMove etc.)
	Payload *anypb.Any `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{4}
}

func (x *Event) GetPath() *NodePath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Event) GetPayload() *anypb.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Request to parse the tree of available data.
type NodeStructRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *TreeID     `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
	Paths  []*NodePath `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *NodeStructRequest) Reset() {
	*x = NodeStructRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStructRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStructRequest) ProtoMessage() {}

func (x *NodeStructRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStructRequest.ProtoReflect.Descriptor instead.
func (*NodeStructRequest) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{5}
}

func (x *NodeStructRequest) GetTreeID() *TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

func (x *NodeStructRequest) GetPaths() []*NodePath {
	if x != nil {
		return x.Paths
	}
	return nil
}

// Subset of the tree of available data.
type NodeStructReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NodeStructReply) Reset() {
	*x = NodeStructReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStructReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStructReply) ProtoMessage() {}

func (x *NodeStructReply) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStructReply.ProtoReflect.Descriptor instead.
func (*NodeStructReply) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{6}
}

func (x *NodeStructReply) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type DataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path *NodePath `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Last tick seen. The server will not send data back if
	// the last tick matches the current tick on the server.
	// Set to 0 to force the server to send back the data.
	LastTick uint32 `protobuf:"varint,2,opt,name=lastTick,proto3" json:"lastTick,omitempty"`
}

func (x *DataRequest) Reset() {
	*x = DataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest) ProtoMessage() {}

func (x *DataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest.ProtoReflect.Descriptor instead.
func (*DataRequest) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{7}
}

func (x *DataRequest) GetPath() *NodePath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DataRequest) GetLastTick() uint32 {
	if x != nil {
		return x.LastTick
	}
	return 0
}

// Request to query data from nodes in the tree.
type NodeDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *TreeID        `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
	Reqs   []*DataRequest `protobuf:"bytes,2,rep,name=reqs,proto3" json:"reqs,omitempty"`
}

func (x *NodeDataRequest) Reset() {
	*x = NodeDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDataRequest) ProtoMessage() {}

func (x *NodeDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDataRequest.ProtoReflect.Descriptor instead.
func (*NodeDataRequest) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{8}
}

func (x *NodeDataRequest) GetTreeID() *TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

func (x *NodeDataRequest) GetReqs() []*DataRequest {
	if x != nil {
		return x.Reqs
	}
	return nil
}

// Data from nodes in the tree.
type NodeDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeData []*NodeData `protobuf:"bytes,1,rep,name=node_data,json=nodeData,proto3" json:"node_data,omitempty"`
}

func (x *NodeDataReply) Reset() {
	*x = NodeDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDataReply) ProtoMessage() {}

func (x *NodeDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDataReply.ProtoReflect.Descriptor instead.
func (*NodeDataReply) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{9}
}

func (x *NodeDataReply) GetNodeData() []*NodeData {
	if x != nil {
		return x.NodeData
	}
	return nil
}

// Request to send events to the backend.
type SendEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *TreeID  `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
	Events []*Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *SendEventsRequest) Reset() {
	*x = SendEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventsRequest) ProtoMessage() {}

func (x *SendEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventsRequest.ProtoReflect.Descriptor instead.
func (*SendEventsRequest) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{10}
}

func (x *SendEventsRequest) GetTreeID() *TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

func (x *SendEventsRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

// Request for streaming events from the backend. Subscribe to events matching
// ALL of the provided filters.
type StreamEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *TreeID `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
	// Only return events matching this path.
	Path *NodePath `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Only return events matching this typeurl. If empty, matches all events.
	TypeUrl string `protobuf:"bytes,3,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
}

func (x *StreamEventsRequest) Reset() {
	*x = StreamEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsRequest) ProtoMessage() {}

func (x *StreamEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamEventsRequest) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{11}
}

func (x *StreamEventsRequest) GetTreeID() *TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

func (x *StreamEventsRequest) GetPath() *NodePath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *StreamEventsRequest) GetTypeUrl() string {
	if x != nil {
		return x.TypeUrl
	}
	return ""
}

// Errors from processing the events.
type SendEventsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SendEventsReply) Reset() {
	*x = SendEventsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEventsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventsReply) ProtoMessage() {}

func (x *SendEventsReply) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventsReply.ProtoReflect.Descriptor instead.
func (*SendEventsReply) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{12}
}

func (x *SendEventsReply) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ActivePathsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *TreeID `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
}

func (x *ActivePathsRequest) Reset() {
	*x = ActivePathsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePathsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePathsRequest) ProtoMessage() {}

func (x *ActivePathsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePathsRequest.ProtoReflect.Descriptor instead.
func (*ActivePathsRequest) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{13}
}

func (x *ActivePathsRequest) GetTreeID() *TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

type ActivePathsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*NodePath `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *ActivePathsReply) Reset() {
	*x = ActivePathsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePathsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePathsReply) ProtoMessage() {}

func (x *ActivePathsReply) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePathsReply.ProtoReflect.Descriptor instead.
func (*ActivePathsReply) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{14}
}

func (x *ActivePathsReply) GetPaths() []*NodePath {
	if x != nil {
		return x.Paths
	}
	return nil
}

type ResetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *TreeID `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
}

func (x *ResetStateRequest) Reset() {
	*x = ResetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetStateRequest) ProtoMessage() {}

func (x *ResetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetStateRequest.ProtoReflect.Descriptor instead.
func (*ResetStateRequest) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{15}
}

func (x *ResetStateRequest) GetTreeID() *TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

type ResetStateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetStateReply) Reset() {
	*x = ResetStateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetStateReply) ProtoMessage() {}

func (x *ResetStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetStateReply.ProtoReflect.Descriptor instead.
func (*ResetStateReply) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{16}
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *TreeID   `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
	Path   *NodePath `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteRequest) GetTreeID() *TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

func (x *DeleteRequest) GetPath() *NodePath {
	if x != nil {
		return x.Path
	}
	return nil
}

type DeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteReply) Reset() {
	*x = DeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tree_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReply) ProtoMessage() {}

func (x *DeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_tree_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReply.ProtoReflect.Descriptor instead.
func (*DeleteReply) Descriptor() ([]byte, []int) {
	return file_tree_proto_rawDescGZIP(), []int{18}
}

var File_tree_proto protoreflect.FileDescriptor

var file_tree_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a, 0x06, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x72, 0x65, 0x65, 0x49, 0x44, 0x22, 0x1e, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xbf, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77,
	0x12, 0x26, 0x0a, 0x02, 0x70, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x00, 0x52, 0x02, 0x70, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6b, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06,
	0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44,
	0x52, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x22, 0x39, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x53, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x22, 0x6a, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x52, 0x06, 0x74, 0x72, 0x65,
	0x65, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x65, 0x71, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x72, 0x65, 0x71, 0x73,
	0x22, 0x42, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x6a, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x72, 0x65,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x52, 0x06, 0x74,
	0x72, 0x65, 0x65, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x86, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x72, 0x65, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x52, 0x06, 0x74, 0x72,
	0x65, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x29, 0x0a, 0x0f, 0x53, 0x65, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x40, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x72,
	0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x52, 0x06,
	0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74,
	0x72, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x52,
	0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x65, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74,
	0x72, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x52,
	0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x32, 0x8f, 0x04, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1d, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tree_proto_rawDescOnce sync.Once
	file_tree_proto_rawDescData = file_tree_proto_rawDesc
)

func file_tree_proto_rawDescGZIP() []byte {
	file_tree_proto_rawDescOnce.Do(func() {
		file_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_tree_proto_rawDescData)
	})
	return file_tree_proto_rawDescData
}

var file_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_tree_proto_goTypes = []interface{}{
	(*TreeID)(nil),              // 0: multiscope.TreeID
	(*NodePath)(nil),            // 1: multiscope.NodePath
	(*Node)(nil),                // 2: multiscope.Node
	(*NodeData)(nil),            // 3: multiscope.NodeData
	(*Event)(nil),               // 4: multiscope.Event
	(*NodeStructRequest)(nil),   // 5: multiscope.NodeStructRequest
	(*NodeStructReply)(nil),     // 6: multiscope.NodeStructReply
	(*DataRequest)(nil),         // 7: multiscope.DataRequest
	(*NodeDataRequest)(nil),     // 8: multiscope.NodeDataRequest
	(*NodeDataReply)(nil),       // 9: multiscope.NodeDataReply
	(*SendEventsRequest)(nil),   // 10: multiscope.SendEventsRequest
	(*StreamEventsRequest)(nil), // 11: multiscope.StreamEventsRequest
	(*SendEventsReply)(nil),     // 12: multiscope.SendEventsReply
	(*ActivePathsRequest)(nil),  // 13: multiscope.ActivePathsRequest
	(*ActivePathsReply)(nil),    // 14: multiscope.ActivePathsReply
	(*ResetStateRequest)(nil),   // 15: multiscope.ResetStateRequest
	(*ResetStateReply)(nil),     // 16: multiscope.ResetStateReply
	(*DeleteRequest)(nil),       // 17: multiscope.DeleteRequest
	(*DeleteReply)(nil),         // 18: multiscope.DeleteReply
	(*anypb.Any)(nil),           // 19: google.protobuf.Any
}
var file_tree_proto_depIdxs = []int32{
	1,  // 0: multiscope.Node.path:type_name -> multiscope.NodePath
	2,  // 1: multiscope.Node.children:type_name -> multiscope.Node
	1,  // 2: multiscope.NodeData.path:type_name -> multiscope.NodePath
	19, // 3: multiscope.NodeData.pb:type_name -> google.protobuf.Any
	1,  // 4: multiscope.Event.path:type_name -> multiscope.NodePath
	19, // 5: multiscope.Event.payload:type_name -> google.protobuf.Any
	0,  // 6: multiscope.NodeStructRequest.treeID:type_name -> multiscope.TreeID
	1,  // 7: multiscope.NodeStructRequest.paths:type_name -> multiscope.NodePath
	2,  // 8: multiscope.NodeStructReply.nodes:type_name -> multiscope.Node
	1,  // 9: multiscope.DataRequest.path:type_name -> multiscope.NodePath
	0,  // 10: multiscope.NodeDataRequest.treeID:type_name -> multiscope.TreeID
	7,  // 11: multiscope.NodeDataRequest.reqs:type_name -> multiscope.DataRequest
	3,  // 12: multiscope.NodeDataReply.node_data:type_name -> multiscope.NodeData
	0,  // 13: multiscope.SendEventsRequest.treeID:type_name -> multiscope.TreeID
	4,  // 14: multiscope.SendEventsRequest.events:type_name -> multiscope.Event
	0,  // 15: multiscope.StreamEventsRequest.treeID:type_name -> multiscope.TreeID
	1,  // 16: multiscope.StreamEventsRequest.path:type_name -> multiscope.NodePath
	0,  // 17: multiscope.ActivePathsRequest.treeID:type_name -> multiscope.TreeID
	1,  // 18: multiscope.ActivePathsReply.paths:type_name -> multiscope.NodePath
	0,  // 19: multiscope.ResetStateRequest.treeID:type_name -> multiscope.TreeID
	0,  // 20: multiscope.DeleteRequest.treeID:type_name -> multiscope.TreeID
	1,  // 21: multiscope.DeleteRequest.path:type_name -> multiscope.NodePath
	5,  // 22: multiscope.Tree.GetNodeStruct:input_type -> multiscope.NodeStructRequest
	8,  // 23: multiscope.Tree.GetNodeData:input_type -> multiscope.NodeDataRequest
	10, // 24: multiscope.Tree.SendEvents:input_type -> multiscope.SendEventsRequest
	15, // 25: multiscope.Tree.ResetState:input_type -> multiscope.ResetStateRequest
	13, // 26: multiscope.Tree.ActivePaths:input_type -> multiscope.ActivePathsRequest
	11, // 27: multiscope.Tree.StreamEvents:input_type -> multiscope.StreamEventsRequest
	17, // 28: multiscope.Tree.Delete:input_type -> multiscope.DeleteRequest
	6,  // 29: multiscope.Tree.GetNodeStruct:output_type -> multiscope.NodeStructReply
	9,  // 30: multiscope.Tree.GetNodeData:output_type -> multiscope.NodeDataReply
	12, // 31: multiscope.Tree.SendEvents:output_type -> multiscope.SendEventsReply
	16, // 32: multiscope.Tree.ResetState:output_type -> multiscope.ResetStateReply
	14, // 33: multiscope.Tree.ActivePaths:output_type -> multiscope.ActivePathsReply
	4,  // 34: multiscope.Tree.StreamEvents:output_type -> multiscope.Event
	18, // 35: multiscope.Tree.Delete:output_type -> multiscope.DeleteReply
	29, // [29:36] is the sub-list for method output_type
	22, // [22:29] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_tree_proto_init() }
func file_tree_proto_init() {
	if File_tree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStructRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStructReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEventsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePathsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePathsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetStateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tree_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tree_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*NodeData_Raw)(nil),
		(*NodeData_Pb)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tree_proto_goTypes,
		DependencyIndexes: file_tree_proto_depIdxs,
		MessageInfos:      file_tree_proto_msgTypes,
	}.Build()
	File_tree_proto = out.File
	file_tree_proto_rawDesc = nil
	file_tree_proto_goTypes = nil
	file_tree_proto_depIdxs = nil
}
