// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: ticker.proto

package ticker_go_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TickersClient is the client API for Tickers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickersClient interface {
	// Create a new ticker node in Multiscope.
	New(ctx context.Context, in *NewTickerRequest, opts ...grpc.CallOption) (*NewTickerResponse, error)
	// Write ticker data.
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
}

type tickersClient struct {
	cc grpc.ClientConnInterface
}

func NewTickersClient(cc grpc.ClientConnInterface) TickersClient {
	return &tickersClient{cc}
}

func (c *tickersClient) New(ctx context.Context, in *NewTickerRequest, opts ...grpc.CallOption) (*NewTickerResponse, error) {
	out := new(NewTickerResponse)
	err := c.cc.Invoke(ctx, "/multiscope.ticker.Tickers/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickersClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/multiscope.ticker.Tickers/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickersServer is the server API for Tickers service.
// All implementations must embed UnimplementedTickersServer
// for forward compatibility
type TickersServer interface {
	// Create a new ticker node in Multiscope.
	New(context.Context, *NewTickerRequest) (*NewTickerResponse, error)
	// Write ticker data.
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	mustEmbedUnimplementedTickersServer()
}

// UnimplementedTickersServer must be embedded to have forward compatible implementations.
type UnimplementedTickersServer struct {
}

func (UnimplementedTickersServer) New(context.Context, *NewTickerRequest) (*NewTickerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (UnimplementedTickersServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedTickersServer) mustEmbedUnimplementedTickersServer() {}

// UnsafeTickersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickersServer will
// result in compilation errors.
type UnsafeTickersServer interface {
	mustEmbedUnimplementedTickersServer()
}

func RegisterTickersServer(s grpc.ServiceRegistrar, srv TickersServer) {
	s.RegisterService(&Tickers_ServiceDesc, srv)
}

func _Tickers_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickersServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiscope.ticker.Tickers/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickersServer).New(ctx, req.(*NewTickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickers_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickersServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiscope.ticker.Tickers/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickersServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tickers_ServiceDesc is the grpc.ServiceDesc for Tickers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tickers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiscope.ticker.Tickers",
	HandlerType: (*TickersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _Tickers_New_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Tickers_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticker.proto",
}
