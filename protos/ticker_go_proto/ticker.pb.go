// Protocol buffer to stream scientific data.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: ticker.proto

package ticker_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	tree_go_proto "multiscope/protos/tree_go_proto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Command controls the experiment.
type Command int32

const (
	Command_CMD_NONE     Command = 0
	Command_CMD_PAUSE    Command = 1
	Command_CMD_RUN      Command = 2
	Command_CMD_STEP     Command = 3
	Command_CMD_STEPBACK Command = 4
)

// Enum value maps for Command.
var (
	Command_name = map[int32]string{
		0: "CMD_NONE",
		1: "CMD_PAUSE",
		2: "CMD_RUN",
		3: "CMD_STEP",
		4: "CMD_STEPBACK",
	}
	Command_value = map[string]int32{
		"CMD_NONE":     0,
		"CMD_PAUSE":    1,
		"CMD_RUN":      2,
		"CMD_STEP":     3,
		"CMD_STEPBACK": 4,
	}
)

func (x Command) Enum() *Command {
	p := new(Command)
	*p = x
	return p
}

func (x Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Command) Descriptor() protoreflect.EnumDescriptor {
	return file_ticker_proto_enumTypes[0].Descriptor()
}

func (Command) Type() protoreflect.EnumType {
	return &file_ticker_proto_enumTypes[0]
}

func (x Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Command.Descriptor instead.
func (Command) EnumDescriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{0}
}

// Set the period at which an experiment runs.
type SetPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Duration of the period set by the user.
	PeriodMs int64 `protobuf:"varint,1,opt,name=period_ms,json=periodMs,proto3" json:"period_ms,omitempty"`
}

func (x *SetPeriod) Reset() {
	*x = SetPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPeriod) ProtoMessage() {}

func (x *SetPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPeriod.ProtoReflect.Descriptor instead.
func (*SetPeriod) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{0}
}

func (x *SetPeriod) GetPeriodMs() int64 {
	if x != nil {
		return x.PeriodMs
	}
	return 0
}

// SetTickView sets at which tick the data should be displayed.
type SetTickView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TickCommand:
	//
	//	*SetTickView_ToDisplay
	//	*SetTickView_Offset
	TickCommand isSetTickView_TickCommand `protobuf_oneof:"tickCommand"`
}

func (x *SetTickView) Reset() {
	*x = SetTickView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTickView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTickView) ProtoMessage() {}

func (x *SetTickView) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTickView.ProtoReflect.Descriptor instead.
func (*SetTickView) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{1}
}

func (m *SetTickView) GetTickCommand() isSetTickView_TickCommand {
	if m != nil {
		return m.TickCommand
	}
	return nil
}

func (x *SetTickView) GetToDisplay() int64 {
	if x, ok := x.GetTickCommand().(*SetTickView_ToDisplay); ok {
		return x.ToDisplay
	}
	return 0
}

func (x *SetTickView) GetOffset() int64 {
	if x, ok := x.GetTickCommand().(*SetTickView_Offset); ok {
		return x.Offset
	}
	return 0
}

type isSetTickView_TickCommand interface {
	isSetTickView_TickCommand()
}

type SetTickView_ToDisplay struct {
	// Value of the tick to display.
	ToDisplay int64 `protobuf:"varint,1,opt,name=to_display,json=toDisplay,proto3,oneof"`
}

type SetTickView_Offset struct {
	// Offset the tick at which to display the data.
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3,oneof"`
}

func (*SetTickView_ToDisplay) isSetTickView_TickCommand() {}

func (*SetTickView_Offset) isSetTickView_TickCommand() {}

// Player in the Multiscope tree.
type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *tree_go_proto.TreeID `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
	// Path in the tree.
	Path *tree_go_proto.NodePath `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{2}
}

func (x *Player) GetTreeID() *tree_go_proto.TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

func (x *Player) GetPath() *tree_go_proto.NodePath {
	if x != nil {
		return x.Path
	}
	return nil
}

// Request to create a new player in the tree.
type NewPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *tree_go_proto.TreeID `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
	// Path in the tree.
	Path *tree_go_proto.NodePath `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Force the player to ignore when the UI sends a pause signal.
	// This is useful when the reader cannot stop reading the data.
	IgnorePause bool `protobuf:"varint,3,opt,name=ignorePause,proto3" json:"ignorePause,omitempty"`
}

func (x *NewPlayerRequest) Reset() {
	*x = NewPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPlayerRequest) ProtoMessage() {}

func (x *NewPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPlayerRequest.ProtoReflect.Descriptor instead.
func (*NewPlayerRequest) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{3}
}

func (x *NewPlayerRequest) GetTreeID() *tree_go_proto.TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

func (x *NewPlayerRequest) GetPath() *tree_go_proto.NodePath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *NewPlayerRequest) GetIgnorePause() bool {
	if x != nil {
		return x.IgnorePause
	}
	return false
}

// Response after creating a new player in the tree.
type NewPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *Player `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *NewPlayerResponse) Reset() {
	*x = NewPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPlayerResponse) ProtoMessage() {}

func (x *NewPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPlayerResponse.ProtoReflect.Descriptor instead.
func (*NewPlayerResponse) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{4}
}

func (x *NewPlayerResponse) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

// Data sends to the player from an experiment.
type PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tick int64 `protobuf:"varint,1,opt,name=tick,proto3" json:"tick,omitempty"`
}

func (x *PlayerData) Reset() {
	*x = PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerData) ProtoMessage() {}

func (x *PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerData.ProtoReflect.Descriptor instead.
func (*PlayerData) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerData) GetTick() int64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

// Request to store a frame in the player.
// All the children of the player (supporting the functionality)
// will store their data associated with the current frame number.
type StoreFrameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the player.
	Player *Player `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	// Data to send to the player.
	Data *PlayerData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StoreFrameRequest) Reset() {
	*x = StoreFrameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreFrameRequest) ProtoMessage() {}

func (x *StoreFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreFrameRequest.ProtoReflect.Descriptor instead.
func (*StoreFrameRequest) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{6}
}

func (x *StoreFrameRequest) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *StoreFrameRequest) GetData() *PlayerData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Response after storing a frame.
type StoreFrameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StoreFrameResponse) Reset() {
	*x = StoreFrameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreFrameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreFrameResponse) ProtoMessage() {}

func (x *StoreFrameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreFrameResponse.ProtoReflect.Descriptor instead.
func (*StoreFrameResponse) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{7}
}

// Time line information.
type TimeLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayTick     int64  `protobuf:"varint,1,opt,name=display_tick,json=displayTick,proto3" json:"display_tick,omitempty"`
	HistoryLength   int64  `protobuf:"varint,2,opt,name=history_length,json=historyLength,proto3" json:"history_length,omitempty"`
	OldestTick      int64  `protobuf:"varint,3,opt,name=oldest_tick,json=oldestTick,proto3" json:"oldest_tick,omitempty"`
	StorageCapacity string `protobuf:"bytes,4,opt,name=storage_capacity,json=storageCapacity,proto3" json:"storage_capacity,omitempty"`
}

func (x *TimeLine) Reset() {
	*x = TimeLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeLine) ProtoMessage() {}

func (x *TimeLine) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeLine.ProtoReflect.Descriptor instead.
func (*TimeLine) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{8}
}

func (x *TimeLine) GetDisplayTick() int64 {
	if x != nil {
		return x.DisplayTick
	}
	return 0
}

func (x *TimeLine) GetHistoryLength() int64 {
	if x != nil {
		return x.HistoryLength
	}
	return 0
}

func (x *TimeLine) GetOldestTick() int64 {
	if x != nil {
		return x.OldestTick
	}
	return 0
}

func (x *TimeLine) GetStorageCapacity() string {
	if x != nil {
		return x.StorageCapacity
	}
	return ""
}

// Information about the player sent to the UI.
type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeline *TimeLine `protobuf:"bytes,1,opt,name=timeline,proto3" json:"timeline,omitempty"`
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerInfo) GetTimeline() *TimeLine {
	if x != nil {
		return x.Timeline
	}
	return nil
}

// Action event for a player.
type PlayerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*PlayerAction_SetPeriod
	//	*PlayerAction_Command
	//	*PlayerAction_TickView
	Action isPlayerAction_Action `protobuf_oneof:"action"`
}

func (x *PlayerAction) Reset() {
	*x = PlayerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAction) ProtoMessage() {}

func (x *PlayerAction) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAction.ProtoReflect.Descriptor instead.
func (*PlayerAction) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{10}
}

func (m *PlayerAction) GetAction() isPlayerAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *PlayerAction) GetSetPeriod() *SetPeriod {
	if x, ok := x.GetAction().(*PlayerAction_SetPeriod); ok {
		return x.SetPeriod
	}
	return nil
}

func (x *PlayerAction) GetCommand() Command {
	if x, ok := x.GetAction().(*PlayerAction_Command); ok {
		return x.Command
	}
	return Command_CMD_NONE
}

func (x *PlayerAction) GetTickView() *SetTickView {
	if x, ok := x.GetAction().(*PlayerAction_TickView); ok {
		return x.TickView
	}
	return nil
}

type isPlayerAction_Action interface {
	isPlayerAction_Action()
}

type PlayerAction_SetPeriod struct {
	SetPeriod *SetPeriod `protobuf:"bytes,1,opt,name=setPeriod,proto3,oneof"`
}

type PlayerAction_Command struct {
	Command Command `protobuf:"varint,2,opt,name=command,proto3,enum=multiscope.ticker.Command,oneof"`
}

type PlayerAction_TickView struct {
	TickView *SetTickView `protobuf:"bytes,3,opt,name=tickView,proto3,oneof"`
}

func (*PlayerAction_SetPeriod) isPlayerAction_Action() {}

func (*PlayerAction_Command) isPlayerAction_Action() {}

func (*PlayerAction_TickView) isPlayerAction_Action() {}

// Ticker in the Multiscope tree.
type Ticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *tree_go_proto.TreeID `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
	// Path in the tree.
	Path *tree_go_proto.NodePath `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Ticker) Reset() {
	*x = Ticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticker) ProtoMessage() {}

func (x *Ticker) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticker.ProtoReflect.Descriptor instead.
func (*Ticker) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{11}
}

func (x *Ticker) GetTreeID() *tree_go_proto.TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

func (x *Ticker) GetPath() *tree_go_proto.NodePath {
	if x != nil {
		return x.Path
	}
	return nil
}

// Request to create a new ticker in the tree.
type NewTickerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeID *tree_go_proto.TreeID   `protobuf:"bytes,1,opt,name=treeID,proto3" json:"treeID,omitempty"`
	Path   *tree_go_proto.NodePath `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *NewTickerRequest) Reset() {
	*x = NewTickerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTickerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTickerRequest) ProtoMessage() {}

func (x *NewTickerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTickerRequest.ProtoReflect.Descriptor instead.
func (*NewTickerRequest) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{12}
}

func (x *NewTickerRequest) GetTreeID() *tree_go_proto.TreeID {
	if x != nil {
		return x.TreeID
	}
	return nil
}

func (x *NewTickerRequest) GetPath() *tree_go_proto.NodePath {
	if x != nil {
		return x.Path
	}
	return nil
}

// Response after creating a new ticker in the tree.
type NewTickerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker *Ticker `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (x *NewTickerResponse) Reset() {
	*x = NewTickerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTickerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTickerResponse) ProtoMessage() {}

func (x *NewTickerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTickerResponse.ProtoReflect.Descriptor instead.
func (*NewTickerResponse) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{13}
}

func (x *NewTickerResponse) GetTicker() *Ticker {
	if x != nil {
		return x.Ticker
	}
	return nil
}

// Data sends from the client to the server.
type TickerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current tick number.
	Tick int64 `protobuf:"varint,2,opt,name=tick,proto3" json:"tick,omitempty"`
	// Timing statistics about the ticker.
	Periods *TickerData_Periods `protobuf:"bytes,3,opt,name=periods,proto3" json:"periods,omitempty"`
}

func (x *TickerData) Reset() {
	*x = TickerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerData) ProtoMessage() {}

func (x *TickerData) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerData.ProtoReflect.Descriptor instead.
func (*TickerData) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{14}
}

func (x *TickerData) GetTick() int64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *TickerData) GetPeriods() *TickerData_Periods {
	if x != nil {
		return x.Periods
	}
	return nil
}

// Write actions for a ticker.
type TickerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*TickerAction_SetPeriod
	//	*TickerAction_Command
	Action isTickerAction_Action `protobuf_oneof:"action"`
}

func (x *TickerAction) Reset() {
	*x = TickerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerAction) ProtoMessage() {}

func (x *TickerAction) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerAction.ProtoReflect.Descriptor instead.
func (*TickerAction) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{15}
}

func (m *TickerAction) GetAction() isTickerAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *TickerAction) GetSetPeriod() *SetPeriod {
	if x, ok := x.GetAction().(*TickerAction_SetPeriod); ok {
		return x.SetPeriod
	}
	return nil
}

func (x *TickerAction) GetCommand() Command {
	if x, ok := x.GetAction().(*TickerAction_Command); ok {
		return x.Command
	}
	return Command_CMD_NONE
}

type isTickerAction_Action interface {
	isTickerAction_Action()
}

type TickerAction_SetPeriod struct {
	SetPeriod *SetPeriod `protobuf:"bytes,1,opt,name=setPeriod,proto3,oneof"`
}

type TickerAction_Command struct {
	Command Command `protobuf:"varint,2,opt,name=command,proto3,enum=multiscope.ticker.Command,oneof"`
}

func (*TickerAction_SetPeriod) isTickerAction_Action() {}

func (*TickerAction_Command) isTickerAction_Action() {}

// Request to write ticker data.
type WriteTickerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the ticker.
	Ticker *Ticker `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// Data about the current state of the ticker.
	Data *TickerData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WriteTickerRequest) Reset() {
	*x = WriteTickerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteTickerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteTickerRequest) ProtoMessage() {}

func (x *WriteTickerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteTickerRequest.ProtoReflect.Descriptor instead.
func (*WriteTickerRequest) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{16}
}

func (x *WriteTickerRequest) GetTicker() *Ticker {
	if x != nil {
		return x.Ticker
	}
	return nil
}

func (x *WriteTickerRequest) GetData() *TickerData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Response after writing ticker data.
type WriteTickerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WriteTickerResponse) Reset() {
	*x = WriteTickerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteTickerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteTickerResponse) ProtoMessage() {}

func (x *WriteTickerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteTickerResponse.ProtoReflect.Descriptor instead.
func (*WriteTickerResponse) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{17}
}

type TickerData_Periods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total period between two ticks.
	Total *durationpb.Duration `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	// Average time spent in experiment code.
	Experiment *durationpb.Duration `protobuf:"bytes,2,opt,name=experiment,proto3" json:"experiment,omitempty"`
	// Average time spent writing data from the ticker.
	Callbacks *durationpb.Duration `protobuf:"bytes,3,opt,name=callbacks,proto3" json:"callbacks,omitempty"`
	// Average time forced to be idle.
	Idle *durationpb.Duration `protobuf:"bytes,4,opt,name=idle,proto3" json:"idle,omitempty"`
}

func (x *TickerData_Periods) Reset() {
	*x = TickerData_Periods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerData_Periods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerData_Periods) ProtoMessage() {}

func (x *TickerData_Periods) ProtoReflect() protoreflect.Message {
	mi := &file_ticker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerData_Periods.ProtoReflect.Descriptor instead.
func (*TickerData_Periods) Descriptor() ([]byte, []int) {
	return file_ticker_proto_rawDescGZIP(), []int{14, 0}
}

func (x *TickerData_Periods) GetTotal() *durationpb.Duration {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *TickerData_Periods) GetExperiment() *durationpb.Duration {
	if x != nil {
		return x.Experiment
	}
	return nil
}

func (x *TickerData_Periods) GetCallbacks() *durationpb.Duration {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

func (x *TickerData_Periods) GetIdle() *durationpb.Duration {
	if x != nil {
		return x.Idle
	}
	return nil
}

var File_ticker_proto protoreflect.FileDescriptor

var file_ticker_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a,
	0x09, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x22, 0x57, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0x5e, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x72,
	0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x52, 0x06,
	0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x8a, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x52, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x22, 0x46, 0x0a,
	0x11, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x22, 0x79, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x45, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x69, 0x63,
	0x6b, 0x56, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x69, 0x63, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5e, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x74,
	0x72, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x52,
	0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x68, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x52, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x46, 0x0a, 0x11, 0x4e,
	0x65, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x22, 0xc1, 0x02, 0x0a, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x1a, 0xdd, 0x01, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x15, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x53, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4d, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04,
	0x32, 0xfa, 0x02, 0x0a, 0x07, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x09,
	0x4e, 0x65, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65,
	0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x23, 0x5a,
	0x21, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ticker_proto_rawDescOnce sync.Once
	file_ticker_proto_rawDescData = file_ticker_proto_rawDesc
)

func file_ticker_proto_rawDescGZIP() []byte {
	file_ticker_proto_rawDescOnce.Do(func() {
		file_ticker_proto_rawDescData = protoimpl.X.CompressGZIP(file_ticker_proto_rawDescData)
	})
	return file_ticker_proto_rawDescData
}

var file_ticker_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ticker_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ticker_proto_goTypes = []interface{}{
	(Command)(0),                   // 0: multiscope.ticker.Command
	(*SetPeriod)(nil),              // 1: multiscope.ticker.SetPeriod
	(*SetTickView)(nil),            // 2: multiscope.ticker.SetTickView
	(*Player)(nil),                 // 3: multiscope.ticker.Player
	(*NewPlayerRequest)(nil),       // 4: multiscope.ticker.NewPlayerRequest
	(*NewPlayerResponse)(nil),      // 5: multiscope.ticker.NewPlayerResponse
	(*PlayerData)(nil),             // 6: multiscope.ticker.PlayerData
	(*StoreFrameRequest)(nil),      // 7: multiscope.ticker.StoreFrameRequest
	(*StoreFrameResponse)(nil),     // 8: multiscope.ticker.StoreFrameResponse
	(*TimeLine)(nil),               // 9: multiscope.ticker.TimeLine
	(*PlayerInfo)(nil),             // 10: multiscope.ticker.PlayerInfo
	(*PlayerAction)(nil),           // 11: multiscope.ticker.PlayerAction
	(*Ticker)(nil),                 // 12: multiscope.ticker.Ticker
	(*NewTickerRequest)(nil),       // 13: multiscope.ticker.NewTickerRequest
	(*NewTickerResponse)(nil),      // 14: multiscope.ticker.NewTickerResponse
	(*TickerData)(nil),             // 15: multiscope.ticker.TickerData
	(*TickerAction)(nil),           // 16: multiscope.ticker.TickerAction
	(*WriteTickerRequest)(nil),     // 17: multiscope.ticker.WriteTickerRequest
	(*WriteTickerResponse)(nil),    // 18: multiscope.ticker.WriteTickerResponse
	(*TickerData_Periods)(nil),     // 19: multiscope.ticker.TickerData.Periods
	(*tree_go_proto.TreeID)(nil),   // 20: multiscope.TreeID
	(*tree_go_proto.NodePath)(nil), // 21: multiscope.NodePath
	(*durationpb.Duration)(nil),    // 22: google.protobuf.Duration
}
var file_ticker_proto_depIdxs = []int32{
	20, // 0: multiscope.ticker.Player.treeID:type_name -> multiscope.TreeID
	21, // 1: multiscope.ticker.Player.path:type_name -> multiscope.NodePath
	20, // 2: multiscope.ticker.NewPlayerRequest.treeID:type_name -> multiscope.TreeID
	21, // 3: multiscope.ticker.NewPlayerRequest.path:type_name -> multiscope.NodePath
	3,  // 4: multiscope.ticker.NewPlayerResponse.player:type_name -> multiscope.ticker.Player
	3,  // 5: multiscope.ticker.StoreFrameRequest.player:type_name -> multiscope.ticker.Player
	6,  // 6: multiscope.ticker.StoreFrameRequest.data:type_name -> multiscope.ticker.PlayerData
	9,  // 7: multiscope.ticker.PlayerInfo.timeline:type_name -> multiscope.ticker.TimeLine
	1,  // 8: multiscope.ticker.PlayerAction.setPeriod:type_name -> multiscope.ticker.SetPeriod
	0,  // 9: multiscope.ticker.PlayerAction.command:type_name -> multiscope.ticker.Command
	2,  // 10: multiscope.ticker.PlayerAction.tickView:type_name -> multiscope.ticker.SetTickView
	20, // 11: multiscope.ticker.Ticker.treeID:type_name -> multiscope.TreeID
	21, // 12: multiscope.ticker.Ticker.path:type_name -> multiscope.NodePath
	20, // 13: multiscope.ticker.NewTickerRequest.treeID:type_name -> multiscope.TreeID
	21, // 14: multiscope.ticker.NewTickerRequest.path:type_name -> multiscope.NodePath
	12, // 15: multiscope.ticker.NewTickerResponse.ticker:type_name -> multiscope.ticker.Ticker
	19, // 16: multiscope.ticker.TickerData.periods:type_name -> multiscope.ticker.TickerData.Periods
	1,  // 17: multiscope.ticker.TickerAction.setPeriod:type_name -> multiscope.ticker.SetPeriod
	0,  // 18: multiscope.ticker.TickerAction.command:type_name -> multiscope.ticker.Command
	12, // 19: multiscope.ticker.WriteTickerRequest.ticker:type_name -> multiscope.ticker.Ticker
	15, // 20: multiscope.ticker.WriteTickerRequest.data:type_name -> multiscope.ticker.TickerData
	22, // 21: multiscope.ticker.TickerData.Periods.total:type_name -> google.protobuf.Duration
	22, // 22: multiscope.ticker.TickerData.Periods.experiment:type_name -> google.protobuf.Duration
	22, // 23: multiscope.ticker.TickerData.Periods.callbacks:type_name -> google.protobuf.Duration
	22, // 24: multiscope.ticker.TickerData.Periods.idle:type_name -> google.protobuf.Duration
	13, // 25: multiscope.ticker.Tickers.NewTicker:input_type -> multiscope.ticker.NewTickerRequest
	17, // 26: multiscope.ticker.Tickers.WriteTicker:input_type -> multiscope.ticker.WriteTickerRequest
	4,  // 27: multiscope.ticker.Tickers.NewPlayer:input_type -> multiscope.ticker.NewPlayerRequest
	7,  // 28: multiscope.ticker.Tickers.StoreFrame:input_type -> multiscope.ticker.StoreFrameRequest
	14, // 29: multiscope.ticker.Tickers.NewTicker:output_type -> multiscope.ticker.NewTickerResponse
	18, // 30: multiscope.ticker.Tickers.WriteTicker:output_type -> multiscope.ticker.WriteTickerResponse
	5,  // 31: multiscope.ticker.Tickers.NewPlayer:output_type -> multiscope.ticker.NewPlayerResponse
	8,  // 32: multiscope.ticker.Tickers.StoreFrame:output_type -> multiscope.ticker.StoreFrameResponse
	29, // [29:33] is the sub-list for method output_type
	25, // [25:29] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_ticker_proto_init() }
func file_ticker_proto_init() {
	if File_ticker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ticker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTickView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreFrameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreFrameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTickerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTickerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteTickerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteTickerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerData_Periods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ticker_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SetTickView_ToDisplay)(nil),
		(*SetTickView_Offset)(nil),
	}
	file_ticker_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*PlayerAction_SetPeriod)(nil),
		(*PlayerAction_Command)(nil),
		(*PlayerAction_TickView)(nil),
	}
	file_ticker_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*TickerAction_SetPeriod)(nil),
		(*TickerAction_Command)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ticker_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ticker_proto_goTypes,
		DependencyIndexes: file_ticker_proto_depIdxs,
		EnumInfos:         file_ticker_proto_enumTypes,
		MessageInfos:      file_ticker_proto_msgTypes,
	}.Build()
	File_ticker_proto = out.File
	file_ticker_proto_rawDesc = nil
	file_ticker_proto_goTypes = nil
	file_ticker_proto_depIdxs = nil
}
