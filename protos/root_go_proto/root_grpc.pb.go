// Protocol buffer to stream scientific data.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: root.proto

package root_go_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Root_GetVersion_FullMethodName     = "/multiscope.root.Root/GetVersion"
	Root_GetRootInfo_FullMethodName    = "/multiscope.root.Root/GetRootInfo"
	Root_SetKeySettings_FullMethodName = "/multiscope.root.Root/SetKeySettings"
	Root_SetLayout_FullMethodName      = "/multiscope.root.Root/SetLayout"
)

// RootClient is the client API for Root service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RootClient interface {
	// Get the version of the proto API.
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// Return info at the root node.
	GetRootInfo(ctx context.Context, in *GetRootInfoRequest, opts ...grpc.CallOption) (*GetRootInfoResponse, error)
	// Set the key for the UI settings.
	SetKeySettings(ctx context.Context, in *SetKeySettingsRequest, opts ...grpc.CallOption) (*SetKeySettingsResponse, error)
	// Set the layout of the UI.
	SetLayout(ctx context.Context, in *SetLayoutRequest, opts ...grpc.CallOption) (*SetLayoutResponse, error)
}

type rootClient struct {
	cc grpc.ClientConnInterface
}

func NewRootClient(cc grpc.ClientConnInterface) RootClient {
	return &rootClient{cc}
}

func (c *rootClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, Root_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootClient) GetRootInfo(ctx context.Context, in *GetRootInfoRequest, opts ...grpc.CallOption) (*GetRootInfoResponse, error) {
	out := new(GetRootInfoResponse)
	err := c.cc.Invoke(ctx, Root_GetRootInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootClient) SetKeySettings(ctx context.Context, in *SetKeySettingsRequest, opts ...grpc.CallOption) (*SetKeySettingsResponse, error) {
	out := new(SetKeySettingsResponse)
	err := c.cc.Invoke(ctx, Root_SetKeySettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootClient) SetLayout(ctx context.Context, in *SetLayoutRequest, opts ...grpc.CallOption) (*SetLayoutResponse, error) {
	out := new(SetLayoutResponse)
	err := c.cc.Invoke(ctx, Root_SetLayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootServer is the server API for Root service.
// All implementations must embed UnimplementedRootServer
// for forward compatibility
type RootServer interface {
	// Get the version of the proto API.
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// Return info at the root node.
	GetRootInfo(context.Context, *GetRootInfoRequest) (*GetRootInfoResponse, error)
	// Set the key for the UI settings.
	SetKeySettings(context.Context, *SetKeySettingsRequest) (*SetKeySettingsResponse, error)
	// Set the layout of the UI.
	SetLayout(context.Context, *SetLayoutRequest) (*SetLayoutResponse, error)
	mustEmbedUnimplementedRootServer()
}

// UnimplementedRootServer must be embedded to have forward compatible implementations.
type UnimplementedRootServer struct {
}

func (UnimplementedRootServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedRootServer) GetRootInfo(context.Context, *GetRootInfoRequest) (*GetRootInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootInfo not implemented")
}
func (UnimplementedRootServer) SetKeySettings(context.Context, *SetKeySettingsRequest) (*SetKeySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKeySettings not implemented")
}
func (UnimplementedRootServer) SetLayout(context.Context, *SetLayoutRequest) (*SetLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLayout not implemented")
}
func (UnimplementedRootServer) mustEmbedUnimplementedRootServer() {}

// UnsafeRootServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RootServer will
// result in compilation errors.
type UnsafeRootServer interface {
	mustEmbedUnimplementedRootServer()
}

func RegisterRootServer(s grpc.ServiceRegistrar, srv RootServer) {
	s.RegisterService(&Root_ServiceDesc, srv)
}

func _Root_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Root_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Root_GetRootInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootServer).GetRootInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Root_GetRootInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootServer).GetRootInfo(ctx, req.(*GetRootInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Root_SetKeySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootServer).SetKeySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Root_SetKeySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootServer).SetKeySettings(ctx, req.(*SetKeySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Root_SetLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootServer).SetLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Root_SetLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootServer).SetLayout(ctx, req.(*SetLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Root_ServiceDesc is the grpc.ServiceDesc for Root service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Root_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiscope.root.Root",
	HandlerType: (*RootServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Root_GetVersion_Handler,
		},
		{
			MethodName: "GetRootInfo",
			Handler:    _Root_GetRootInfo_Handler,
		},
		{
			MethodName: "SetKeySettings",
			Handler:    _Root_SetKeySettings_Handler,
		},
		{
			MethodName: "SetLayout",
			Handler:    _Root_SetLayout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "root.proto",
}
