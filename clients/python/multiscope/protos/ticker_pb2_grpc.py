# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from multiscope.protos import ticker_pb2 as multiscope_dot_protos_dot_ticker__pb2


class TickersStub(object):
    """///////////////////////
    Service
    ///////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewTicker = channel.unary_unary(
                '/multiscope.ticker.Tickers/NewTicker',
                request_serializer=multiscope_dot_protos_dot_ticker__pb2.NewTickerRequest.SerializeToString,
                response_deserializer=multiscope_dot_protos_dot_ticker__pb2.NewTickerResponse.FromString,
                )
        self.WriteTicker = channel.unary_unary(
                '/multiscope.ticker.Tickers/WriteTicker',
                request_serializer=multiscope_dot_protos_dot_ticker__pb2.WriteTickerRequest.SerializeToString,
                response_deserializer=multiscope_dot_protos_dot_ticker__pb2.WriteTickerResponse.FromString,
                )
        self.NewPlayer = channel.unary_unary(
                '/multiscope.ticker.Tickers/NewPlayer',
                request_serializer=multiscope_dot_protos_dot_ticker__pb2.NewPlayerRequest.SerializeToString,
                response_deserializer=multiscope_dot_protos_dot_ticker__pb2.NewPlayerResponse.FromString,
                )
        self.StoreFrame = channel.unary_unary(
                '/multiscope.ticker.Tickers/StoreFrame',
                request_serializer=multiscope_dot_protos_dot_ticker__pb2.StoreFrameRequest.SerializeToString,
                response_deserializer=multiscope_dot_protos_dot_ticker__pb2.StoreFrameResponse.FromString,
                )


class TickersServicer(object):
    """///////////////////////
    Service
    ///////////////////////

    """

    def NewTicker(self, request, context):
        """Create a new ticker node in Multiscope.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteTicker(self, request, context):
        """Write ticker data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewPlayer(self, request, context):
        """Create a new player node in Multiscope.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreFrame(self, request, context):
        """Write ticker data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TickersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewTicker': grpc.unary_unary_rpc_method_handler(
                    servicer.NewTicker,
                    request_deserializer=multiscope_dot_protos_dot_ticker__pb2.NewTickerRequest.FromString,
                    response_serializer=multiscope_dot_protos_dot_ticker__pb2.NewTickerResponse.SerializeToString,
            ),
            'WriteTicker': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteTicker,
                    request_deserializer=multiscope_dot_protos_dot_ticker__pb2.WriteTickerRequest.FromString,
                    response_serializer=multiscope_dot_protos_dot_ticker__pb2.WriteTickerResponse.SerializeToString,
            ),
            'NewPlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.NewPlayer,
                    request_deserializer=multiscope_dot_protos_dot_ticker__pb2.NewPlayerRequest.FromString,
                    response_serializer=multiscope_dot_protos_dot_ticker__pb2.NewPlayerResponse.SerializeToString,
            ),
            'StoreFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreFrame,
                    request_deserializer=multiscope_dot_protos_dot_ticker__pb2.StoreFrameRequest.FromString,
                    response_serializer=multiscope_dot_protos_dot_ticker__pb2.StoreFrameResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'multiscope.ticker.Tickers', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tickers(object):
    """///////////////////////
    Service
    ///////////////////////

    """

    @staticmethod
    def NewTicker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multiscope.ticker.Tickers/NewTicker',
            multiscope_dot_protos_dot_ticker__pb2.NewTickerRequest.SerializeToString,
            multiscope_dot_protos_dot_ticker__pb2.NewTickerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteTicker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multiscope.ticker.Tickers/WriteTicker',
            multiscope_dot_protos_dot_ticker__pb2.WriteTickerRequest.SerializeToString,
            multiscope_dot_protos_dot_ticker__pb2.WriteTickerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewPlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multiscope.ticker.Tickers/NewPlayer',
            multiscope_dot_protos_dot_ticker__pb2.NewPlayerRequest.SerializeToString,
            multiscope_dot_protos_dot_ticker__pb2.NewPlayerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multiscope.ticker.Tickers/StoreFrame',
            multiscope_dot_protos_dot_ticker__pb2.StoreFrameRequest.SerializeToString,
            multiscope_dot_protos_dot_ticker__pb2.StoreFrameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
